//------------------------------------------------------------------------------
// <autogenerated>
//    This code was generated by Measurement Studio.
//    Runtime Version: 15.0.0.49153
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// <autogenerated>
//------------------------------------------------------------------------------

using NationalInstruments;
using NationalInstruments.DAQmx;
using NationalInstruments.DAQmx.ComponentModel;
using System;
using System.ComponentModel;
using System.Threading;


namespace JC_ICR
{
    /// <summary>
    /// Defines a DAQ component that performs continuous input data acquisition
    /// operations.
    /// </summary>
    [System.ComponentModel.DesignerCategory("Code")]
    [ToolboxItem(false)]
    [DefaultEvent("DataReady")]
    [TemplateData("StartReadU32ArrayLoopStop", MxbFile="IR_Read.mxb")]
    partial class IR_ReadComponent : ContinuousInputDaqComponent<CounterMultiChannelReader, uint[]>
    {
        private static readonly object EventDataReady = new object();
        private static readonly TimeSpan DefaultTimeout = TimeSpan.FromMilliseconds(0);
        
        /// <summary>
        /// Initializes a new instance of the component.
        /// </summary>
        public IR_ReadComponent()
        {
            Initialize();
        }
        
        /// <summary>
        /// Initializes a new instance of the component with the specified container.
        /// </summary>
        public IR_ReadComponent(IContainer container)
            : this()
        {
            if (container != null)
                container.Add(this);
        }
        
        /// <summary>
        /// Creates the underlying DAQ task of the component.
        /// </summary><returns>
        /// A DAQ task that represents the DAQ task of the component.
        /// </returns>
        protected override Task CreateTask()
        {
            IR_Read newTask = new IR_Read();
            newTask.Stream.Timeout = Convert.ToInt32(DefaultTimeout.TotalMilliseconds);
            return newTask;
        }

        /// <summary>
        /// Creates the underlying DAQ reader of the component.
        /// </summary><returns>
        /// The DAQ reader that performs the input data acquisition operations.
        /// </returns>
        protected override CounterMultiChannelReader CreateReader()
        {
            return new CounterMultiChannelReader(Task.Stream);
        }

        /// <summary>
        /// Begins a continuous input data acquisition.
        /// </summary><param name="callback">
        /// An asynchronous callback that is called when the read is completed.
        /// </param><param name="state">
        /// An object that distinguishes this asynchronous read request from other
        /// requests.
        /// </param>
        protected override void BeginReadContinuous(AsyncCallback callback, object state)
        {
            Reader.BeginReadSingleSampleUInt32(callback, state);
        }

        /// <summary>
        /// Ends a continuous input acquisition.
        /// </summary><param name="result">
        /// An IAsyncResult that represents an asynchronous call started by
        /// BeginReadContinuous.
        /// </param>
        protected override void EndReadContinuous(IAsyncResult result)
        {
            try
            {
                uint[] data = Reader.EndReadSingleSampleUInt32(result);

                IR_ReadComponentDataReadyEventArgs args = new IR_ReadComponentDataReadyEventArgs(data, data.Length);
                OnDataReady(args);
            }

            #region Debugger Exception Warnings
            catch (DaqException ex)
            {
                // If you Dispose the component while an asynchronous DAQ operation
                // is still running, the component may already be disposed or may be in the
                // process of disposing when this method is called.  Depending on timing, this situation
                // will result in one of the three errors below.  This is expected behavior.
                //
                // DaqExceptions are processed by the caller of this method in the
                // NationalInstruments.DAQmx.ComponentModel class library.  However, by default,
                // the Visual Studio debugger intercepts these exceptions and breaks
                // the debugger when they occur.
                //
                // Because these exceptions do not represent errors, they are caught and safely discarded
                // here.
                if (ex.Error != -200088 && ex.Error != -88709 && ex.Error != -88710)
                    throw;
            }
            #endregion

        }

        /// <summary>
        /// Raises the DataReady event.
        /// </summary><param name="e">
        /// The event arguments of the DataReady event.
        /// </param>
        protected virtual void OnDataReady(IR_ReadComponentDataReadyEventArgs e)
        {
            RaiseGenericEventAsync(EventDataReady, e);
        }

        /// <summary>
        /// Occurs when data has been read from a continuous input data acquisition.
        /// </summary>
        [Category("Action")]
        [Description("Occurs when data has been read from a continuous input data acquisition.")]
        public event EventHandler<IR_ReadComponentDataReadyEventArgs> DataReady
        {
            add
            {
                AddEventHandler(EventDataReady, value);
            }

            remove
            {
                RemoveEventHandler(EventDataReady, value);
            }
        }
    }

    /// <summary>
    /// Provides data for the DataReady event.
    /// </summary>
    public class IR_ReadComponentDataReadyEventArgs : DataReadyEventArgs<uint[]>
    {
        private int m_actualNumberOfSamplesRead;
    /// <summary>
    /// Initializes a new instance of the DataReady event arguments.
    /// </summary><param name="data">
    /// The data that was acquired from a continuous input data acquisition.
    /// </param><param name="actualNumberOfSamplesRead">
    /// Actual number of samples acquired by read operation.
    /// </param>
        public IR_ReadComponentDataReadyEventArgs(uint[] data, int actualNumberOfSamplesRead)
            : base(data)
        {
            this.m_actualNumberOfSamplesRead = actualNumberOfSamplesRead;
        }
        /// <summary>
        /// Get actual number of samples acquired with last read operation.
        /// </summary>
        public int ActualNumberOfSamplesRead 
        {
            get { return m_actualNumberOfSamplesRead; }
            private set { m_actualNumberOfSamplesRead = value; } 
        }
    }

    #region Timing Compatibility
    partial class IR_ReadComponent
    {
        /// <summary>
        /// This member supports compatibility with code that is generated with a
        /// different timing mode and is not intended to be used directly from your code.
        /// </summary>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Obsolete("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.")]
        public event EventHandler<IR_ReadComponentReadCompletedEventArgs> ReadCompleted
        {
            add
            {
                throw new NotSupportedException("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.");
            }

            remove
            {
                throw new NotSupportedException("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.");
            }
        }
    }
    
    /// <summary>
    /// This type supports compatibility with code that is generated with a
    /// different timing mode and is not intended to be used directly from your code.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public class IR_ReadComponentReadCompletedEventArgs : ReadCompletedEventArgs<object>
    {
        /// <summary>
        /// This member supports compatibility with code that is generated with a
        /// different timing mode and is not intended to be used directly from your code.
        /// </summary>
        public IR_ReadComponentReadCompletedEventArgs(object data)
            : base(data)
        {
            throw new NotSupportedException("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.");
        }
    }
    #endregion




      
    public class IR_Read : Task
    {
        public IR_Read()
        {
            Configure();
        }
        
        public virtual void Configure()
        {
            // This code was generated by Measurement Studio.  Changes to this 
            // file may cause incorrect behavior and will be lost if the code 
            // is regenerated.
                
                CIChannels.CreateCountEdgesChannel("Dev1/ctr0", "CountEdges", CICountEdgesActiveEdge.Rising, 0, CICountEdgesCountDirection.Up);
				CIChannels["CountEdges"].CountEdgesTerminal = "/Dev1/PFI0";


        }
    }


}
